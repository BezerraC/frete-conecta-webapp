<!-- Login Section Start -->
<div class="our-work">
    <div class="container">
      <div class="row section-row justify-content-center align-items-center">
        <div class="col-lg-7 col-md-7">
          <!-- Section Title Start -->
          <div class="section-title text-center">
            <h3 class="wow fadeInUp">Bem Vindo Motorista</h3>
            <h2 class="text-anime-style-3">Faça seu cadastro</h2>
          </div>
          <!-- Section Title End -->
        </div>
      </div>
  
      <!-- Driver Form Section Start -->
      <div class="contact-us">
        <div class="container">
          <div class="row justify-content-center align-items-center">
            <div class="col-lg-6">
              <div class="contact-form-box wow fadeInUp" data-wow-delay="0.5s">
                <!-- Driver Form Start -->
                <div class="contact-form">
                  <form action="/driver" method="POST" data-toggle="validator">
                    <div class="row">
                      <div class="form-group col-md-6 mb-4">
                        <input type="text" name="fname" class="form-control" id="fname" placeholder="nome" required>
                        <div class="help-block with-errors"></div>
                      </div>
  
                      <div class="form-group col-md-6 mb-4">
                        <input type="text" name="lname" class="form-control" id="lname" placeholder="sobrenome" required>
                        <div class="help-block with-errors"></div>
                      </div>
  
                      <div class="form-group col-md-6 mb-4">
                        <input maxlength="15" oninput="phoneMask(this)"  type="text" name="phone" class="form-control" id="phone" placeholder="whatstapp" required>
                        <div class="help-block with-errors"></div>
                      </div>

                      <div class="form-group col-md-6 mb-4">
                        <input maxlength="14"  oninput="cpfMask(this)" onblur="validateCPF(this)" type="text" name="cpf" class="form-control" id="cpf" placeholder="CPF" required>
                        <div class="help-block with-errors"></div>
                      </div>
  
                      <div class="form-group col-md-12 mb-4">
                        <input type="email" name="email" class="form-control" id="email" placeholder="email" required>
                        <div class="help-block with-errors"></div>
                      </div>
  
                      <div class="form-group col-md-12 mb-4">
                        <input type="password" name="password" class="form-control" id="password" placeholder="senha" required>
                        <div class="help-block with-errors"></div>
                      </div>
  
                      <div class="form-group col-md-12 mb-4">
                        <input type="password" name="retype-password" class="form-control" id="retype-password" placeholder="repita sua senha" required>
                        <div class="help-block with-errors"></div>
                      </div>
  
                      <div class="col-md-12">
                        <button type="submit" class="btn-default">cadastrar</button>
                        <div id="msgSubmit" class="h3 text-left hidden"></div>
                      </div>
                    </div>
                  </form>
                </div>
                <!-- Driver Form End -->
              </div>
            </div>
  
          </div>
        </div>
      </div>
      <!-- Driver Form Section End -->
  
    </div>
</div>
<script>
const passwordInput = document.getElementById("password");
const retypePasswordInput = document.getElementById("retype-password");
const errorDiv = document.querySelector("#retype-password + .help-block");

function validatePasswords() {
  const password = passwordInput.value;
  const retypePassword = retypePasswordInput.value;

  if (password && retypePassword) {
    if (password !== retypePassword) {
      errorDiv.textContent = "As senhas não coincidem.";
    } else {
      errorDiv.textContent = ""; // Remove a mensagem de erro
    }
  } else {
    errorDiv.textContent = ""; // Limpa o erro se os campos estiverem vazios
  }
}

// Adiciona o evento `input` para verificar enquanto o usuário digita
passwordInput.addEventListener("input", validatePasswords);
retypePasswordInput.addEventListener("input", validatePasswords);


function phoneMask(input) {
  let v = input.value;

  // Remove todos os caracteres não numéricos
  v = v.replace(/\D/g, "");

  // Aplica a máscara conforme o tamanho do número
  if (v.length > 10) {
    // Formato com 9 dígitos: (99) 99999-9999
    v = v.replace(/^(\d{2})(\d{5})(\d{4})$/, "($1) $2-$3");
  } else if (v.length > 6) {
    // Formato com 8 dígitos: (99) 9999-9999
    v = v.replace(/^(\d{2})(\d{4})(\d{0,4})$/, "($1) $2-$3");
  } else if (v.length > 2) {
    // Formato inicial: (99) 9999
    v = v.replace(/^(\d{2})(\d{0,5})$/, "($1) $2");
  } else if (v.length > 0) {
    // Apenas o DDD: (99
    v = v.replace(/^(\d{0,2})$/, "($1");
  }

  input.value = v; // Atualiza o valor do campo
}

function cpfMask(i) {
  var v = i.value;
  
  // Remove qualquer caractere que não seja número
  v = v.replace(/\D/g, "");

  // Adiciona os pontos e o traço no lugar correto
  if (v.length <= 11) {
    v = v.replace(/(\d{3})(\d)/, "$1.$2");
    v = v.replace(/(\d{3})(\d)/, "$1.$2");
    v = v.replace(/(\d{3})(\d{1,2})$/, "$1-$2");
  }
  
  i.value = v; // Atualiza o valor do campo
}

function validateCPF(input) {
  const cpf = input.value.replace(/\D/g, ""); // Remove os caracteres de formatação

  if (!isValidCPF(cpf)) {
    // Exibe mensagem de erro
    const errorDiv = input.nextElementSibling;
    errorDiv.textContent = "CPF inválido.";
    input.classList.add("is-invalid");
  } else {
    // Remove mensagem de erro, caso exista
    const errorDiv = input.nextElementSibling;
    errorDiv.textContent = "";
    input.classList.remove("is-invalid");
    input.classList.add("is-valid");
  }
}

function isValidCPF(cpf) {
  if (cpf.length !== 11 || /^(\d)\1+$/.test(cpf)) return false;

  let sum = 0;
  let remainder;

  // Validação do primeiro dígito verificador
  for (let i = 1; i <= 9; i++) {
    sum += parseInt(cpf.substring(i - 1, i)) * (11 - i);
  }
  remainder = (sum * 10) % 11;
  if (remainder === 10 || remainder === 11) remainder = 0;
  if (remainder !== parseInt(cpf.substring(9, 10))) return false;

  sum = 0;
  // Validação do segundo dígito verificador
  for (let i = 1; i <= 10; i++) {
    sum += parseInt(cpf.substring(i - 1, i)) * (12 - i);
  }
  remainder = (sum * 10) % 11;
  if (remainder === 10 || remainder === 11) remainder = 0;
  if (remainder !== parseInt(cpf.substring(10, 11))) return false;

  return true;
}
</script>